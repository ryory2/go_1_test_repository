name: CI-CD to ECS

on:
  push:
    branches: ["main"] # mainブランチへのpushをトリガーに設定する例

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. コードをチェックアウト
      - name: Check out repository
        uses: actions/checkout@v3

      # 2. AWSへのログイン (公式の ECR ログイン用 GitHub Action)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Dockerイメージをビルド & ECRプッシュに必要なログイン
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # 4. Dockerイメージビルド
      - name: Build Docker image
        run: |
          docker compose --file docker/docker-compose.prod.yml --env-file docker/env/.env.prod build --no-cache
          docker tag test/go_1_test_repository:latest 990606419933.dkr.ecr.ap-northeast-1.amazonaws.com/test/go_1_test_repository:latest

      # 5. ECR へ push
      - name: Push to Amazon ECR
        run: |
          docker push 990606419933.dkr.ecr.ap-northeast-1.amazonaws.com/test/go_1_test_repository:latest

      # 6. タスク定義をECSへデプロイ (amazon-ecs-deploy-task-definition@v1)
      - name: Deploy to ECS
        id: ecsdeploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          # ローカルにあるタスク定義テンプレートファイル
          task-definition: "taskdef.json"
          # ECSクラスター名
          cluster: "my-ecs-cluster"
          # デプロイ先のサービス名
          service: "my-ecs-service"
          # タスク定義内のコンテナ名 ("my-container"と一致させる)
          container-name: "my-container"
          # 置き換え先のコンテナイメージ ("<IMAGE_NAME>" をこれに置換)
          image: "${{ secrets.ECR_REPOSITORY }}:latest"
          # 強制デプロイしたい場合は true
          force-new-deployment: true
